#!/bin/sh
":"; exec emacs --quick --script "$0" "$@" # -*-mode: lisp-interaction; lexical-binding: t-*-

;;; Commentary:
;; Write archive-contents out as JSON.

;;; Code:

(require 'url-handlers)

(setq debug-on-error t)

(defun my/write-json-for-archive (archive)
  "Convert archive-contents of ARCHIVE into JSON.
ARCHIVE is a cons cell (NAME . URL), just like the values in `package-archives'."
  (let* ((name (car archive))
         (url (cdr archive))
         (out-file (format "%s.json" name))
         archive-content)
    (let ((buf (url-retrieve-synchronously
                (format "%s/archive-contents" url))))
      (with-temp-buffer
        ;; insert body from `buf' into the current buffer
        (url-insert buf)
        (decode-coding-region (point-min) (point-max) 'utf-8)
        (setq archive-content (cdr (read (buffer-string))))))
    (with-temp-file out-file
      (cl-letf* ((print-alist-orig (symbol-function 'json--print-alist))
                 (print-array-orig (symbol-function 'json--print-array))
                 ((symbol-function 'json--print-array)
                  ;; Some cons cell somewhere is being printed as an array
                  (lambda (obj)
                    (if (and (consp obj)
                             (or (stringp (car obj))
                                 (not (car obj)))
                             (stringp (cdr obj)))
                        (json--print-array (list (car obj) (cdr obj)))
                      (funcall print-array-orig obj))))
                 ((symbol-function 'json--print-alist)
                  (lambda (obj)
                    ;; Override for version lists
                    (if (and (listp obj)
                             (equal 1 (length obj))
                             (ignore-errors
                               (seq-every-p #'numberp (car obj))))
                        (json--print-array (car obj))
                      (funcall print-alist-orig obj)))))
        (let ((json-encoding-pretty-print t))
          (insert (json-encode archive-content)))))
    (message "Written to %s" out-file)))
(if (or (equal "-h" (car argv))
        (equal "--help" (car argv))
        (not (cadr argv))
        (not (car argv)))
    (message "Usage: <this file> <name> <url>")
  (my/write-json-for-archive (cons (car argv) (cadr argv))))

(setq argv nil)
